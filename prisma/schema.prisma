generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  termsAcceptedAt      DateTime // Data/hora em que o usuário aceitou os Termos de Uso
  privacyAcceptedAt    DateTime // Data/hora em que o usuário aceitou a Política de Privacidade
  termsVersionAccepted String?   // Versão dos termos aceitos (opcional, útil para histórico)
  birthDate            DateTime // Data de nascimento (para controle de idade, se necessário)
  city          String
  state         String
  region        String
  country       String
  bio           String?
  avatarUrl     String?
  isAdmin       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  planExpiresAt DateTime?
  lastLogin     DateTime?      @default(now())
  isEmailVerified Boolean      @default(false)
  publicId      String?
  comments      Comment[]
  contents      Content[]
  favorites     Favorite[]
  notifications Notification[]
  series        Series[]
  reviewedSubs  Submission[]   @relation("AdminReviewer")
  submissions   Submission[]   @relation("UserSubmissions")
  report        Report[]
  Plan          Plan[]
  Payment       Payment[] 
  categoryId    String    
  category      Category? @relation(fields: [categoryId], references: [id])
}

model Plan {
  id          String   @id @default(uuid())
  name        String   @unique // free, premium, etc.
  price       Float
  description String?
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  users     User[]
  Payment Payment[]
}

model Payment {
  id         String   @id @default(uuid())
  userId     String
  planId     String
  amount     Float
  status     String   @default("pending") // pending, completed, failed
  method     String   // credit_card, paypal, etc.
  paidAt     DateTime?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  plan       Plan     @relation(fields: [planId], references: [id])
}

model Report {
  id                String   @id @default(uuid())
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime? // Para soft delete
  moderatorComment  String?
  moderatorId       String  @default("")
  resolved          Boolean @default(false)
  // Relacionamentos
  userId            String
  contentId         String
  user              User    @relation(fields: [userId], references: [id])
  content           Content @relation(fields: [contentId], references: [id])

  @@index([userId])
  @@index([contentId])
}

// categoria de conteúdos e usuários
model Category {
  id         String       @id @default(uuid())
  name       String       @unique
  isPublic     Boolean      @default(true)// controle de listagem da categoria (true ou false)
  contents   Content[]
  Submission Submission[]
  deletedAt  DateTime?
  users      User[]       // Novo: relação com usuários
}

model Tag {
  id       String       @id @default(uuid())
  name     String       @unique
  contents ContentTag[]
}

model Series {
  id         String       @id @default(uuid())
  title      String?
  userId     String
  createdAt  DateTime     @default(now())
  deletedAt  DateTime?
  episodes   Content[]
  user       User         @relation(fields: [userId], references: [id])
  Submission Submission[]
}

model Content {
  id           String               @id @default(uuid())
  title        String
  description  String?
  thumbnailUrl String?
  categoryId   String
  userId       String
  views        Int                  @default(0)
  votes        Int                  @default(0)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  contentType  String
  published    Boolean              @default(false)
  scheduledAt  DateTime?
  seriesId     String?
  comments     Comment[]
  category     Category             @relation(fields: [categoryId], references: [id])
  series       Series?              @relation(fields: [seriesId], references: [id])
  user         User                 @relation(fields: [userId], references: [id])
  tags         ContentTag[]
  translations ContentTranslation[]
  favorites    Favorite[]
  media        Media[]
  deletedAt    DateTime?
  report Report[]
}

model Media {
  id         String       @id @default(uuid())
  contentId  String
  type       String
  url        String
  createdAt  DateTime     @default(now())
  publicId   String?
  content    Content      @relation(fields: [contentId], references: [id])
  Submission Submission[] @relation("MediaToSubmission")
  deletedAt  DateTime?
}

model ContentTag {
  id         String       @id @default(uuid())
  contentId  String
  tagId      String
  content    Content      @relation(fields: [contentId], references: [id])
  tag        Tag          @relation(fields: [tagId], references: [id])
  Submission Submission[] @relation("ContentTagToSubmission")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  contentId String
  createdAt DateTime @default(now())
  content   Content  @relation(fields: [contentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  contentId String
  userId    String
  text      String
  createdAt DateTime @default(now())
  content   Content  @relation(fields: [contentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  deletedAt DateTime?
  updatedAt DateTime @updatedAt
}

model ContentTranslation {
  id          String  @id @default(uuid())
  contentId   String
  language    String
  title       String
  description String?
  content     Content @relation(fields: [contentId], references: [id])
}

model Submission {
  id           String       @id @default(uuid())
  title        String
  description  String?
  userId       String
  status       String       @default("pending")
  reviewedAt   DateTime?
  createdAt    DateTime     @default(now())
  feedback     String?
  categoryId   String
  contentType  String
  reviewerId   String?
  seriesId     String?
  thumbnailUrl String?
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  category     Category     @relation(fields: [categoryId], references: [id])
  reviewer     User?        @relation("AdminReviewer", fields: [reviewerId], references: [id])
  series       Series?      @relation(fields: [seriesId], references: [id])
  user         User         @relation("UserSubmissions", fields: [userId], references: [id])
  tags         ContentTag[] @relation("ContentTagToSubmission")
  media        Media[]      @relation("MediaToSubmission")
}
